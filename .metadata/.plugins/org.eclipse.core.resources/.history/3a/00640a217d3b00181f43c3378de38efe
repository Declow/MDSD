/*
 * generated by Xtext 2.13.0
 */
package org.xtext.distj14.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.distj14.math.MathExp
import org.xtext.distj14.math.Exp
import javax.swing.JOptionPane
import org.xtext.distj14.math.Plus
import org.xtext.distj14.math.Minus
import org.xtext.distj14.math.Primary
import org.xtext.distj14.math.Mult
import org.xtext.distj14.math.Div

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {

override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		val result = math.compute
		System.out.println("Math expression = "+math.display)
		JOptionPane.showMessageDialog(null, "result = "+result,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}
	
	//
	// Compute function: computes value of expression
	// Note: written according to illegal left-recursive grammar, requires fix
	//
	
	def int compute(MathExp math) { 
		math.exp.computeExp
	}
	
	def int computeExp(Exp exp) {
		val left = exp.left.primary.computePrim		
		
		switch exp.left?.operator?.displayOp {
			case "*": left*exp.left.second.primary.computePrim
			case "/": left/exp.left.second.primary.computePrim
		}
		
		switch exp.operator?.displayOp {
			case "+": left+exp.right.computeExp
			case "-": left-exp.right.computeExp
		}
		left
	}
	
	
	def int computePrim(Primary factor) {
		factor.number.value
	}

	//
	// Display function: show complete syntax tree
	// Note: written according to illegal left-recursive grammar, requires fix
	//

	def CharSequence display(MathExp math) '''Math[«math.exp.displayExp»]'''
	def CharSequence displayExp(Exp exp) '''Exp[«exp.left.primary.displayPrimary»,«exp.operator?.displayOp»,«exp.right?.displayExp»]'''
	def dispatch String displayOp(Plus op)  { "+" }
	def dispatch String displayOp(Minus op) { "-" }
	def dispatch String displayOp(Mult op) { "*" }
	def dispatch String displayOp(Div op) { "/" }
	def CharSequence displayPrimary(Primary primary) { '''Primary[«primary?.number.value»]''' }
	
		
}
