/*
 * generated by Xtext 2.13.0
 */
package org.xtext.distj14.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.distj14.ide.contentassist.antlr.internal.InternalMathParser;
import org.xtext.distj14.services.MathGrammarAccess;

public class MathParser extends AbstractContentAssistParser {

	@Inject
	private MathGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMathParser createParser() {
		InternalMathParser result = new InternalMathParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpOpWeakAccess().getAlternatives(), "rule__ExpOpWeak__Alternatives");
					put(grammarAccess.getExpOpStrongAccess().getAlternatives(), "rule__ExpOpStrong__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getMathExpAccess().getGroup(), "rule__MathExp__Group__0");
					put(grammarAccess.getExpAccess().getGroup(), "rule__Exp__Group__0");
					put(grammarAccess.getExpAccess().getGroup_1(), "rule__Exp__Group_1__0");
					put(grammarAccess.getFactorAccess().getGroup(), "rule__Factor__Group__0");
					put(grammarAccess.getExpOpWeakAccess().getGroup_0(), "rule__ExpOpWeak__Group_0__0");
					put(grammarAccess.getExpOpWeakAccess().getGroup_1(), "rule__ExpOpWeak__Group_1__0");
					put(grammarAccess.getExpOpStrongAccess().getGroup_0(), "rule__ExpOpStrong__Group_0__0");
					put(grammarAccess.getExpOpStrongAccess().getGroup_1(), "rule__ExpOpStrong__Group_1__0");
					put(grammarAccess.getParenthesisAccess().getGroup(), "rule__Parenthesis__Group__0");
					put(grammarAccess.getMathExpAccess().getExpAssignment_2(), "rule__MathExp__ExpAssignment_2");
					put(grammarAccess.getExpAccess().getLeftAssignment_0(), "rule__Exp__LeftAssignment_0");
					put(grammarAccess.getExpAccess().getOperatorAssignment_1_0(), "rule__Exp__OperatorAssignment_1_0");
					put(grammarAccess.getExpAccess().getRightAssignment_1_1(), "rule__Exp__RightAssignment_1_1");
					put(grammarAccess.getFactorAccess().getPrimaryAssignment_0(), "rule__Factor__PrimaryAssignment_0");
					put(grammarAccess.getFactorAccess().getOperatorAssignment_1(), "rule__Factor__OperatorAssignment_1");
					put(grammarAccess.getFactorAccess().getSecondAssignment_2(), "rule__Factor__SecondAssignment_2");
					put(grammarAccess.getPrimaryAccess().getNumberAssignment_0(), "rule__Primary__NumberAssignment_0");
					put(grammarAccess.getPrimaryAccess().getParAssignment_1(), "rule__Primary__ParAssignment_1");
					put(grammarAccess.getParenthesisAccess().getExpAssignment_1(), "rule__Parenthesis__ExpAssignment_1");
					put(grammarAccess.getNumberAccess().getValueAssignment(), "rule__Number__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MathGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MathGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
